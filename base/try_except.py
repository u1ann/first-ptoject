'==============================Exceptions============================='
# Исключение - объекты, которые прерывают работу кода, если не были обработаны

SyntaxError 
# Исключение, которое выходит, когда в коде допущена синтаксическая ошибка

"a =  "
SyntaxError

'------------------------------------------------------------------------------------------------------------------'

NameError
# Исключение, которое выходит, когда мы обращаемся к несуществущей переменной

'''
num1 = 15
print(num5)
NameError
'''

'---------------------------------------------------------------------------------------------------'

IndexError 
# Исключение, которое выходит когда мы обращаемся по несуществующему индексу

'''
list_ = [12, 20, 0, 2]
print(list_[1000])
IndexError: list index out of range
'''

'''
[].pop()
IndexError: pop from empty list
'''
'-------------------------------------------------------------------------------------------------------'

KeyError
# Исключение, которое выходит, когда мы обращаемся по несуществующему ключу

'''
dict_ = {'a':1}
dict_ ['c']
KeyError
'''

'''
dict_ = {'a':1}
dict_.get['c']
ошибки не будет!!! Так как get не вызывает ошибку, а вернет None, если такого ключа нет
'''

'--------------------------------------------------------------------------------------------------------------'

ValueError
# Исключение, когда мы передаем в функцию не корректный для нее тип данных
# Когда мы распоковываем итеррируемый объект на несколько переменных и кол-во переменных не совподает с кол-во элементов
'''
int('10mgnfk')
ValueError
'''

'''
a, b = 1, 2, 3
ValueError
'''

'-------------------------------------------------------------------------------------------------------------------'

TypeError
# Исключение выходит, когда мы пытаемся испоользовать методы не свойственные каакому-то типу данных
# когда мы пытаемся передать функцию больше или меньше аргументово чем принимает функция

'''
for i in 1234:
TypeError
'''

'''
5 + "5"
TypeError
'''

'''
{[1,2,3]:'hi'}
TypeError
'''

'''
input('Введите число', 123)
TypeError
'''

'''
[].appemd()
TypeError
'''

ZeroDivisionError

'''
45 / 0 
ZeroDivisionError
'''

'''
45 // 0
ZeroDivisionError
'''

'''
45 % 0
ZeroDivisionError
'''

AttributeError
# выходит, когда мы обращаемся к несуществующему аттрибуту или методу объекта (типа данных)

'''
[1, 23, 1, 56].replace('a', '')
AttributError
'''

'''
'makers'.pop(0)
AttributeError
'''

IndentationError
# выходит когда мы не правильно используем отступы

'''
    a = 5
IndentationError
'''

'''
for i in range(11):
print(i)
IdentationError
'''

Exception
# исключение, которое создали, чтобы его вызывать

'================================================Вызов исключений============================================================================='




# raise NameError('Просто вызываю NameError')
# raise IndexError 
# raise KeyError



'==================================================Обработка исключений=============================================='
# Чтобы  код не прекращал свою работу, мы можем использовать конструкцию try-except, и обрабатывать вызванное исключение

# try: # код который может вызвать ошибку\исключение
#     num = int(input('Введите число'))
# except ValueError: # Ожидаемую исключение # Обработку на исключение которое поймали
#     print('Вы вели не число')
# else: # код, который отработает, если исключение не вышло
#     print('Вы вели число {num}')
# finally: # работает всегда
#     print('До свидания')




# try:
#     num = input('Введите число')
#     res = 10 / num
# except ((ValueError, ZeroDivisionError ))
#     print('Что-то пошло не так')


'Напиши программу при помощи try-except, пользователь вводит число, вам нужно сделать проверку на положительность, отрицателность и 0.'
'Положительное число, дожно выходить исключение ValueError'
'Отрицательное число должно выходить исключение TypeError'
'0, олжно выходить исключение ZeroDivisionError'





# try:
#     number = int(input("Введите число: "))

#     if number > 0:
#         raise ValueError("Положительное число")
#     elif number < 0:
#         raise TypeError("Отрицательное число")
#     else:
#         raise ZeroDivisionError("Число равно 0")

# except ValueError as ve:
#     print("Ошибка:", ve)

# except TypeError as te:
#     print("Ошибка:", te)

# except ZeroDivisionError as ze:
#     print("Ошибка:", ze)


